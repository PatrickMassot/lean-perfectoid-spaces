import for_mathlib.prime
import for_mathlib.is_cover 
import analysis.topology.topological_structures
import data.nat.prime 
import algebra.group_power
import for_mathlib.presheaves
import for_mathlib.topology

open nat function

section comm_ring
variables (R : Type) [comm_ring R]
-- This section is filled in in Johan's PR
definition is_subring {R : Type} [comm_ring R] : set R ‚Üí Prop := sorry 
definition is_integrally_closed {R : Type} [comm_ring R] : set R ‚Üí Prop := sorry  
end comm_ring

section topological_ring

variables (R : Type*) [comm_ring R] [topological_space R] [topological_ring R]  

def nhd_zero := (nhds (0 : R)).sets
variable {R}
lemma nhd_zero_symmetric {V : set R} : V ‚àà nhd_zero R ‚Üí  (Œª a, -a) '' V ‚àà nhd_zero R :=
begin
  intro H,
  have := continuous.tendsto (topological_add_group.continuous_neg R) 0,
  rw (show (Œª (a : R), -a) 0 = 0, by simp) at this,
  have almost:= this H,
  have aux : { r : R | -r ‚àà V } = (Œª a, -a) '' V, by simp[set.image, neg_eq_iff_neg_eq],
  simpa [filter.mem_map, aux] using almost
end

-- peredicates we need for topological rings

-- Following is copy-pasted from t2_space class.
-- We need to think whether we could directly use that class
definition is_hausdorff (Œ± : Type*) [topological_space Œ±] : Prop := 
  ‚àÄx y, x ‚â† y ‚Üí ‚àÉu v : set Œ±, is_open u ‚àß is_open v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß u ‚à© v = ‚àÖ


open filter lattice
lemma half_nhd {Œ± : Type*} [topological_space Œ±] [add_group Œ±] [topological_add_group Œ±] (U ‚àà (nhds (0 : Œ±)).sets) : 
  ‚àÉ V ‚àà (nhds (0 : Œ±)).sets, ‚àÄ v w ‚àà V, v + w ‚àà U :=
/- Here is the story : by continuity of addition, and because 0 + 0 = 0,
   (+)‚Åª¬π(U) is a neighborhood of (0, 0). Hence it contains some V‚ÇÅ √ó V‚ÇÇ. Then set V = V‚ÇÅ ‚à© V‚ÇÇ -/
begin
  have nhdb_in_prod : ((Œª a : Œ± √ó Œ±, a.1+a.2)‚Åª¬π' U) ‚àà (nhds ((0, 0) : Œ± √ó Œ±)).sets,
    by apply tendsto_add' ; simp [H],
  rw nhds_prod_eq at nhdb_in_prod,
  rcases mem_prod_iff.1 nhdb_in_prod with ‚ü®V‚ÇÅ, H‚ÇÅ, V‚ÇÇ, H‚ÇÇ, H‚ü©,
  have H12: V‚ÇÅ ‚à© V‚ÇÇ ‚àà (nhds (0 : Œ±)).sets := inter_mem_sets H‚ÇÅ H‚ÇÇ,    
  existsi [(V‚ÇÅ ‚à© V‚ÇÇ), H12],
  intros v w Hv Hw,
  have : (v,w) ‚àà set.prod V‚ÇÅ V‚ÇÇ, by finish,
  simpa using H this
end


instance toplogical_ring.to_uniform_space : uniform_space R := 
uniform_space.of_core { 
  uniformity  := (‚®Ö U ‚àà nhd_zero R, principal {p : R√óR | p.2 - p.1 ‚àà U}),
  refl        := begin simp, intros i H r, exact mem_of_nhds H end,
  symm        := tendsto_infi.2 $ assume V, tendsto_infi.2 $ assume h,
    tendsto_infi' ((Œª r, -r) '' V)
      begin 
        simp [nhd_zero_symmetric h],
        unfold tendsto,
        rw map_principal,
        have H : prod.swap '' {p : R √ó R | ‚àÉ (x : R), x ‚àà V ‚àß -x = p.snd + -p.fst} = {p : R √ó R | p.snd - p.fst ‚àà V},
        begin 
          rw set.image_swap_eq_preimage_swap,
          ext p,
          cases p with r1 r2,
          change (‚àÉ x, x ‚àà V ‚àß -x = r1 - r2) ‚Üî (r2 - r1 ‚àà V),
          have : ‚àÄ x, -x = r1 - r2 ‚Üî x = r2 - r1,
            by intro x; rw [neg_eq_iff_neg_eq, eq_comm]; simp,
          simp only [this], simp
      end,
      simp [H],                           
    end,
  comp        := le_infi $ assume V, le_infi $ assume H, 
    begin
      rcases half_nhd V H with ‚ü®U, ‚ü®h, h'‚ü©‚ü©,
      have comprel : comp_rel {p : R √ó R | p.snd - p.fst ‚àà U} {p : R √ó R | p.snd - p.fst ‚àà U} ‚äÜ {p : R √ó R | p.snd - p.fst ‚àà V},
      begin
        intros p p_comp_rel,
        rcases p_comp_rel with ‚ü®z, ‚ü®Hz1, Hz2‚ü©‚ü©,
        simpa using h' _ _ Hz1 Hz2,
      end,
      replace comprel : principal (comp_rel {p : R √ó R | p.snd - p.fst ‚àà U} {p : R √ó R | p.snd - p.fst ‚àà U}) ‚â§ principal {p : R √ó R | p.snd - p.fst ‚àà V},
        simpa using comprel,
      apply lift'_le,
      swap,
      exact comprel,
      apply mem_infi_sets U,
      apply mem_infi_sets h,
      simp
    end }

variable (R)
/-- Wedhorn Definition 5.31 page 38 -/
definition is_complete : Prop := is_hausdorff R ‚àß ‚àÄ {f:filter R}, cauchy f ‚Üí ‚àÉx, f ‚â§ nhds x

variable {R}
/-- Wedhorn Definition 5.27 page 36 -/
definition is_bounded 
  (B : set R) : Prop := ‚àÄ U ‚àà nhd_zero R, ‚àÉ V ‚àà nhd_zero R, ‚àÄ v ‚àà V, ‚àÄ b ‚àà B, v*b ‚àà U

def power_set (r : R) : set R := set.range (Œª n : ‚Ñï, r^n)

definition is_power_bounded (r : R) : Prop := is_bounded (power_set r)

variable (R)
-- Somehow we need R¬∞ both as a subset of R and a subtype. 
-- There is a coercion from the set to the subtype but relying naively on it seems to bring 
-- type class resolution issues
definition power_bounded_subring := {r : R // is_power_bounded r}
definition power_bounded_subring_set := {r : R | is_power_bounded r}

instance power_bounded_subring_to_ring : has_coe (power_bounded_subring R) R := ‚ü®subtype.val‚ü© 
instance power_bounded_subring_is_ring  : comm_ring (power_bounded_subring R) := sorry
instance : topological_space (power_bounded_subring R) := sorry
instance : topological_ring (power_bounded_subring R) := sorry

definition is_uniform : Prop := is_bounded (power_bounded_subring_set R)

theorem p_is_power_bounded [p : Prime] : is_power_bounded (p : power_bounded_subring R) := sorry

variable {R}
definition is_pseudo_uniformizer : R ‚Üí Prop := sorry
end topological_ring

-- Schol= : "Recall that a topological ring R is Tate if it contains an
-- open and bounded subring R0 ‚äÇ R and a topologically nilpotent unit pi ‚àà R; such elements are
-- called pseudo-uniformizers.""
-- we need definitions of bounded subsete and topologically nilpotent -- and do we have unit? Probably.
class Tate_ring (R : Type) extends comm_ring R, topological_space R, topological_ring R :=
(unfinished : sorry)

-- f-adic rings are called Huber rings by Scholze.
-- Topological ring A contains on open subring A0 such that the subspace topology on A0 is
-- I-adic, where I is a finitely generated ideal of A0 .
class Huber_ring (R : Type) extends comm_ring R, topological_space R, topological_ring R :=
(unfinished2 : sorry)

-- TODO should have an instance going from Tate to Huber


-- Wedhorn Def 7.14
structure is_ring_of_integral_elements {R : Type} [Huber_ring R] (Rplus : set R) : Prop :=
[is_subring : is_subring Rplus]
(is_open : is_open Rplus)
(is_int_closed : is_integrally_closed Rplus)
(is_power_bounded : Rplus ‚äÜ { r : R | is_power_bounded r})

-- a Huber Ring is an f-adic ring.
-- a Huber Pair is what Huber called an Affinoid Ring.
structure Huber_pair :=
(R : Type) 
[RHuber : Huber_ring R]
(Rplus : set R)
[intel : is_ring_of_integral_elements Rplus]

instance : has_coe_to_sort Huber_pair := 
{ S := Type, coe := Huber_pair.R}

postfix `‚Å∫` : 66 := Œª R : Huber_pair _, R.Rplus  

definition Spa (A : Huber_pair) : Type := sorry
instance Spa_topology (A : Huber_pair) : topological_space (Spa A) := sorry 

--definition ùìû_X (A : Huber_pair) : presheaf_of_rings (Spa A) := sorry 
-- it's a presheaf of complete topological rings on all opens (defined on rational opens
-- first and then extended to all via proj limits) -- Huber p75
-- most of that would not be in the adic_space file.

--structure ùì•pre :=
--(X : sorry)
--(ùìûX : sorry)
--(v : sorry)

/-
We denote by ùì•pre the category of tuples X = (X, O X , (v x ) x‚ààX ), where
(a) X is a topological space,
(b) ùìû_X is a presheaf of complete topological rings on X such that the stalk ùìû_X,x of
ùìû_X (considered as a presheaf of rings) is a local ring,
(c) v_x is an equivalence class of valuations on the stalk ùìû_X,x such that supp(v_x) is the
maximal ideal of ùìû_X,x .

Wedhorn p76 shows how Spa(A) gives an object of this for A a Huber pair
-/

--definition affinoid_adic_space (A : Huber_pair) : ùì•pre := sorry

-- unwritten -- it's a full subcat of ùì•pre
class preadic_space (X : Type) extends topological_space X 

-- not logically necessary but should be easy
instance (A : Huber_pair) : preadic_space (Spa A) := sorry 

-- attribute [class] _root_.is_open 

instance preadic_space_restriction {X : Type} [preadic_space X] {U : opens X} :
  preadic_space U := sorry

-- unwritten 
class adic_space (X : Type) extends preadic_space X

-- a preadic_space_equiv is just an isom in ùì•pre, or an isomorphism of preadic spaces.
-- is homeo in Lean yet?
-- unwritten
structure preadic_space_equiv (X Y : Type) [AX : preadic_space X] [AY : preadic_space Y] extends equiv X Y

definition is_preadic_space_equiv (X Y : Type) [AX : preadic_space X] [AY : preadic_space Y] := 
  nonempty (preadic_space_equiv X Y)

definition preadic_space_pullback {X : Type} [preadic_space X] (U : set X) := {x : X // x ‚àà U}

instance pullback_is_preadic_space {X : Type} [preadic_space X] (U : set X) : preadic_space (preadic_space_pullback U) := sorry 

-- notation `is_open` := _root_.is_open
