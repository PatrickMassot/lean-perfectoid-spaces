import continuous_valuations
import Huber_pair 

universes u‚ÇÅ u‚ÇÇ u‚ÇÉ

local attribute [instance] classical.prop_decidable

open set Spv

-- Wedhorn def 7.23.
definition Spa (A : Huber_pair) : set (Spv A) :=
{v | (v ‚àà Cont A) ‚àß ‚àÄ r, r ‚àà A‚Å∫ ‚Üí v r ‚â§ 1}

lemma mk_mem_Spa {A : Huber_pair} {v : Valuation A} : mk v ‚àà Spa A ‚Üî (mk v ‚àà Cont A) ‚àß ‚àÄ r, r ‚àà A‚Å∫ ‚Üí v r ‚â§ 1 :=
begin
  split; intro h; split; try { exact h.left };
  intros r hr,
  { rw ‚Üê (v.val).map_one,
    apply (out_mk r 1).mp,
    convert h.right r hr,
    exact valuation.map_one _, },
  { rw ‚Üê (v.val).map_one at h,
    convert (out_mk r 1).mpr (h.right r hr),
    exact (valuation.map_one _).symm }
end

namespace Spa

variable {A : Huber_pair}

instance : has_coe (Spa A) (Spv A) := ‚ü®subtype.val‚ü©

definition basic_open (r s : A) : set (Spa A) :=
{v | v r ‚â§ v s ‚àß v s ‚â† 0 }

lemma mk_mem_basic_open {r s : A} {v : Valuation A} {hv : mk v ‚àà Spa A} :
(‚ü®mk v, hv‚ü© : Spa A) ‚àà basic_open r s ‚Üî v r ‚â§ v s ‚àß v s ‚â† 0 :=
begin
  split; intro h; split,
  { exact (out_mk r s).mp h.left },
  { exact Valuation.ne_zero_of_equiv_ne_zero out_mk h.right },
  { exact (out_mk r s).mpr h.left },
  { exact Valuation.ne_zero_of_equiv_ne_zero (setoid.symm out_mk) h.right }
end

instance (A : Huber_pair) : topological_space (Spa A) :=
topological_space.generate_from {U : set (Spa A) | ‚àÉ r s : A, U = basic_open r s}

lemma basic_open.is_open (r s : A) : is_open (basic_open r s) :=
topological_space.generate_open.basic (basic_open r s) ‚ü®r, ‚ü®s, rfl‚ü©‚ü©

lemma basic_open_eq (s : A) : basic_open s s = {v | v s ‚â† 0} :=
set.ext $ Œª v, ‚ü®Œª h, h.right, Œª h, ‚ü®le_refl _, h‚ü©‚ü©

-- should only be applied with (HfinT : fintype T) and (Hopen: is_open (span T))
definition rational_open (s : A) (T : set A) : set (Spa A) :=
{v | (‚àÄ t ‚àà T, (v t ‚â§ v s)) ‚àß (v s ‚â† 0)}

lemma mk_mem_rational_open {s : A} {T : set A} {v : Valuation A} {hv : mk v ‚àà Spa A} :
(‚ü®mk v, hv‚ü© : Spa A) ‚àà rational_open s T ‚Üî (‚àÄ t ‚àà T, (v t ‚â§ v s)) ‚àß (v s ‚â† 0) :=
begin
  split; intro h; split,
  { intros t ht,
    exact (out_mk t s).mp (h.left t ht) },
  { exact Valuation.ne_zero_of_equiv_ne_zero out_mk h.right },
  { intros t ht,
    exact (out_mk t s).mpr (h.left t ht) },
  { exact Valuation.ne_zero_of_equiv_ne_zero (setoid.symm out_mk) h.right }
end

definition rational_open_Inter (s : A) (T : set A) :
rational_open s T = (set.Inter (Œª (t : T), basic_open t s)) ‚à© {v | v s ‚â† 0} :=
set.ext $ Œª v, ‚ü®Œª ‚ü®H1, H2‚ü©, ‚ü®set.mem_Inter.2 $ Œª t, ‚ü®H1 _ t.property, H2‚ü©, H2‚ü©,
  Œª ‚ü®H1, H2‚ü©, ‚ü®Œª t ht, (set.mem_Inter.1 H1 ‚ü®t, ht‚ü©).1, H2‚ü©‚ü©

lemma rational_open_add_s (s : A) (T : set A) :
rational_open s T = rational_open s (insert s T) :=
set.ext $ Œª v,
‚ü® Œª ‚ü®H1, H2‚ü©, ‚ü®Œª t Ht, or.rec_on Ht (Œª H, by rw H; exact le_refl _) (H1 t), H2‚ü©,
  Œª ‚ü®H1, H2‚ü©, ‚ü®Œª t Ht, H1 t $ set.mem_insert_of_mem _ Ht,H2‚ü©‚ü©

lemma rational_open.is_open (s : A) (T : set A) [fintype T] :
is_open (rational_open s T) :=
begin
  rw rational_open_Inter,
  apply is_open_inter, swap, rw ‚Üê basic_open_eq s, exact basic_open.is_open s s,
  simpa using @is_open_bInter _ _ _ _ (Œª t : T, basic_open t.1 s) 
    (finite_mem_finset finset.univ) (Œª t ht, basic_open.is_open t s),
end

lemma rational_open_inter.aux1 {s‚ÇÅ s‚ÇÇ : A} {T‚ÇÅ T‚ÇÇ : set A} [fintype T‚ÇÅ] [fintype T‚ÇÇ] (h‚ÇÅ : s‚ÇÅ ‚àà T‚ÇÅ) (h‚ÇÇ : s‚ÇÇ ‚àà T‚ÇÇ) :
rational_open s‚ÇÅ T‚ÇÅ ‚à© rational_open s‚ÇÇ T‚ÇÇ ‚äÜ rational_open (s‚ÇÅ * s‚ÇÇ) {t | ‚àÉ {t‚ÇÅ ‚àà T‚ÇÅ} {t‚ÇÇ ‚àà T‚ÇÇ}, t = t‚ÇÅ * t‚ÇÇ} :=
begin
  intros v h,
  have vmuls : v (s‚ÇÅ * s‚ÇÇ) = v s‚ÇÅ * v s‚ÇÇ := valuation.map_mul _ _ _,
  split,
  { intros t ht,
    rcases ht with ‚ü®t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, ht‚ü©,
    rcases h with ‚ü®‚ü®hv‚ÇÅ, hs‚ÇÅ‚ü©, ‚ü®hv‚ÇÇ, hs‚ÇÇ‚ü©‚ü©,
    subst ht,
    have vmult : v (t‚ÇÅ * t‚ÇÇ) = v t‚ÇÅ * v t‚ÇÇ := valuation.map_mul _ _ _,
    rw [vmuls, vmult],
    refine le_trans (linear_ordered_comm_monoid.mul_le_mul_left (hv‚ÇÇ _ ht‚ÇÇ) _)
                    (linear_ordered_comm_monoid.mul_le_mul_right (hv‚ÇÅ _ ht‚ÇÅ) _ ) },
  { intro H,
    rw vmuls at H,
    cases H1 : v s‚ÇÅ with Œ≥‚ÇÅ, exact h.1.2 H1,
    cases H2 : v s‚ÇÇ with Œ≥‚ÇÇ, exact h.2.2 H2,
    rw [H1,H2] at H,
    change some (Œ≥‚ÇÅ * Œ≥‚ÇÇ) = none at H,
    exact option.no_confusion H },
end

lemma rational_open_inter.aux2 {s‚ÇÅ s‚ÇÇ : A} {T‚ÇÅ T‚ÇÇ : set A} [fintype T‚ÇÅ] [fintype T‚ÇÇ] (h‚ÇÅ : s‚ÇÅ ‚àà T‚ÇÅ) (h‚ÇÇ : s‚ÇÇ ‚àà T‚ÇÇ) :
rational_open (s‚ÇÅ * s‚ÇÇ) {t | ‚àÉ {t‚ÇÅ ‚àà T‚ÇÅ} {t‚ÇÇ ‚àà T‚ÇÇ}, t = t‚ÇÅ * t‚ÇÇ} ‚äÜ rational_open s‚ÇÅ T‚ÇÅ ‚à© rational_open s‚ÇÇ T‚ÇÇ :=
begin
  intros v h,
  have vmuls : v (s‚ÇÅ * s‚ÇÇ) = v s‚ÇÅ * v s‚ÇÇ := valuation.map_mul _ _ _,
  split,
  all_goals
  { rcases h with ‚ü®hv,hs‚ü©,
    have vs‚ÇÅne0 : v s‚ÇÅ ‚â† 0 :=
    begin
      intro H,
      rw [vmuls,H] at hs, simp at hs,
      exact hs
    end,
    have vs‚ÇÇne0 : v s‚ÇÇ ‚â† 0 :=
    begin
      intro H,
      rw [vmuls,H] at hs, simp at hs,
      exact hs
    end,
    split,
  },
  { intros t ht,
    suffices H : v t * v s‚ÇÇ ‚â§ v s‚ÇÅ * v s‚ÇÇ,
    { cases H' : v s‚ÇÇ with Œ≥, exfalso; exact vs‚ÇÇne0 H',
      rw H' at H,
      have := linear_ordered_comm_monoid.mul_le_mul_right H (some (Œ≥‚Åª¬π)),
      conv at this { to_lhs, rw mul_assoc, congr, skip,
        change some (Œ≥ * Œ≥‚Åª¬π) },
      conv at this { to_rhs, rw mul_assoc, congr, skip,
        change some (Œ≥ * Œ≥‚Åª¬π) },
      simp only [mul_right_inv] at this,
      change v t * 1 ‚â§ v s‚ÇÅ * 1 at this,
      rwa [mul_one,mul_one] at this },
    { rw ‚Üêvmuls,
      rw show v t * v s‚ÇÇ = v (t * s‚ÇÇ), from (valuation.map_mul _ _ _).symm,
      refine hv _ ‚ü®t, ht, s‚ÇÇ, h‚ÇÇ, rfl‚ü© } },
  { exact vs‚ÇÅne0 },  { intros t ht,
    suffices H : v s‚ÇÅ * v t ‚â§ v s‚ÇÅ * v s‚ÇÇ,
    { cases H' : v s‚ÇÅ with Œ≥, exfalso; exact vs‚ÇÅne0 H',
      rw H' at H,
      have := linear_ordered_comm_monoid.mul_le_mul_left H (some (Œ≥‚Åª¬π)),
      conv at this { to_lhs, rw ‚Üê mul_assoc, congr, change some (Œ≥‚Åª¬π * Œ≥) },
      conv at this { to_rhs, rw ‚Üê mul_assoc, congr, change some (Œ≥‚Åª¬π * Œ≥) },
      simp only [mul_left_inv] at this,
      change 1 * v t ‚â§ 1 * v s‚ÇÇ at this,
      rwa [one_mul,one_mul] at this },
    { rw ‚Üêvmuls,
      rw show v s‚ÇÅ * v t = v (s‚ÇÅ * t), from (valuation.map_mul _ _ _).symm,
      refine hv _ ‚ü®s‚ÇÅ, h‚ÇÅ, t, ht, rfl‚ü© } },
  { exact vs‚ÇÇne0 }
end

lemma rational_open_inter {s‚ÇÅ s‚ÇÇ : A} {T‚ÇÅ T‚ÇÇ : set A} [fintype T‚ÇÅ] [fintype T‚ÇÇ] (h‚ÇÅ : s‚ÇÅ ‚àà T‚ÇÅ) (h‚ÇÇ : s‚ÇÇ ‚àà T‚ÇÇ) :
rational_open s‚ÇÅ T‚ÇÅ ‚à© rational_open s‚ÇÇ T‚ÇÇ = rational_open (s‚ÇÅ * s‚ÇÇ) {t | ‚àÉ {t‚ÇÅ ‚àà T‚ÇÅ} {t‚ÇÇ ‚àà T‚ÇÇ}, t = t‚ÇÅ * t‚ÇÇ} :=
begin
  ext v, split; intro h,
  exact rational_open_inter.aux1 h‚ÇÅ h‚ÇÇ h,
  exact rational_open_inter.aux2 h‚ÇÅ h‚ÇÇ h
end

lemma basic_open_is_rational (r s : A) :
basic_open r s = rational_open s {r} :=
begin
  ext v,
  split; intro h; split,
  { intros t ht,
    rw mem_singleton_iff at ht, subst ht,
    exact h.left },
  { exact h.right },
  { exact h.left r (mem_singleton_iff.mpr rfl) },
  { exact h.right }
end

def rational_basis (A : Huber_pair) : set (set (Spa A)) :=
{U : set (Spa A) | ‚àÉ {s : A} {T : set A} {h : fintype T}, U = rational_open s T }

-- set_option trace.simplify.rewrite true

lemma is_basis : topological_space.is_topological_basis (rational_basis A) :=
begin
split,
{ intros U‚ÇÅ hU‚ÇÅ U‚ÇÇ hU‚ÇÇ v hv,
  existsi U‚ÇÅ ‚à© U‚ÇÇ,
  rcases hU‚ÇÅ with ‚ü®s‚ÇÅ, T‚ÇÅ, hfin‚ÇÅ, H‚ÇÅ‚ü©,
  rcases hU‚ÇÇ with ‚ü®s‚ÇÇ, T‚ÇÇ, hfin‚ÇÇ, H‚ÇÇ‚ü©,
  haveI := hfin‚ÇÅ,
  haveI := hfin‚ÇÇ,
  rw rational_open_add_s at H‚ÇÅ H‚ÇÇ,
  split,
  { rw [H‚ÇÅ, H‚ÇÇ],
    existsi (s‚ÇÅ * s‚ÇÇ),
    existsi {t | ‚àÉ {t‚ÇÅ ‚àà (insert s‚ÇÅ T‚ÇÅ)} {t‚ÇÇ ‚àà (insert s‚ÇÇ T‚ÇÇ)}, t = t‚ÇÅ * t‚ÇÇ},
    split, sorry,
    apply rational_open_inter; simp },
  exact ‚ü®hv, subset.refl _‚ü©  },
split,
{ apply le_antisymm,
  { exact subset_univ _ },
  apply subset_sUnion_of_mem,
  existsi (1 : A),
  existsi {(1 : A)},
  split, exact set.fintype_singleton _,
  apply le_antisymm,
  { intros v h,
    split,
    intros t ht,
    rw mem_singleton_iff at ht, subst ht,
    exact le_refl _,
    have v1 : v 1 = 1 := valuation.map_one _,
    rw v1,
    intro h, exact option.no_confusion h },
  { exact subset_univ _ } },
{ apply le_antisymm,
  { unfold Spa.topological_space,
    rw generate_from_le_iff_subset_is_open,
    rintros U ‚ü®r, s, H‚ü©,
    rw [H,basic_open_is_rational r s],
    refine topological_space.generate_open.basic _ ‚ü®s, {r}, _, rfl‚ü©,
    exact set.fintype_singleton _ },
  { rw generate_from_le_iff_subset_is_open,
    rintros U ‚ü®s, T, hT, H‚ü©,
    subst H,
    haveI := hT,
    exact rational_open.is_open s T,
  } }
end


end Spa

-- goal now to define the ùìû_X on *rational subsets* and then to extend.

-- to define it on rational subsets it's just a ring completion.

-- remember that a rational open is not actually `rational_open s T` in full
-- generality -- we also need that T is finite and that T generates an open ideal in A.
-- The construction on p73/74 (note typo in first line of p74 -- ideal should be I.D)
-- gives A<T/s> (need completion) and A<T/s>^+ (need integral closure).

-- Once we have this, we see mid way through p75 that the definition of the presheaf
-- on V is proj lim of O_X(U) as U runs through rationals opens in V. This gets
-- the projective limit topology and then we have a presheaf (hopefully this is
-- straightforward) of complete topological rings (need proj lim of complete is complete)

-- We then need the valuations on the stalks (this is direct limit in cat of rings, forget
-- the topology). This will be fiddly but not impossible.

-- We then have an object in V^pre and I think then everything should follow.